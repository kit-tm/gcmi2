from pyof.v0x01.asynchronous.packet_in import PacketIn
from pyof.v0x01.asynchronous.packet_in import PacketInReason
from pyof.v0x01.controller2switch.flow_mod import FlowMod, FlowModCommand
from pyof.v0x01.controller2switch.get_config_reply import GetConfigReply
from pyof.v0x01.asynchronous.error_msg import ErrorMsg
from pyof.v0x01.asynchronous.error_msg import ErrorType
from pyof.v0x01.symmetric.echo_reply import EchoReply
from pyof.v0x01.symmetric.echo_request import EchoRequest
from pyof.v0x01.common.utils import unpack_message
from pyof.v0x01.common.flow_match import Match, FlowWildCards
from pyof.foundation.basic_types import IPAddress, HWAddress, UBInt32
from random import randint
import os

TOTAL_MAC_ADDRESSES = 10000

class MessageGenerator():

    def __init__(self):
        self.packet_in_message  = PacketIn()
        self.packet_in_message.in_port = 1
        self.packet_in_message.buffer_id = 1
        self.packet_in_message.pad = 0
        self.packet_in_message.reason = PacketInReason.OFPR_NO_MATCH

        # from cbench
        data = b"\x04\x06\x00\xe0\x04\x01\x00\x00\x00\x00\x76\xa9\xd4\x0d\x25\x48\x00\x00\x01\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xff\x00\x01\x1a\xc1\x51\xff\xef\x8a\x76\x65\x74\x68\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xce\x2f\xa2\x87\xf6\x70\x76\x65\x74\x68\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xca\x8a\x1e\xf3\x77\xef\x76\x65\x74\x68\x35\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\xfa\xbc\x77\x8d\x7e\x0b\x76\x65\x74\x68\x37\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

        self.features_reply_message = unpack_message(data)

        # for packet_in messages
        self.current_src_mac = 1


    def generate_packet_in_message(self, xid, data_length):
        self.packet_in_message.header.xid = xid
        self.packet_in_message.total_len = data_length + 52

        src_mac_hex = hex(self.current_src_mac % TOTAL_MAC_ADDRESSES)[2:].zfill(12)
        self.current_src_mac += 1

        ethernet_data = \
            "800000000001" + \
            src_mac_hex + \
            "0800"

        ip_in_ethernet_frame = "450000320000000040fff72cc0a80028c0a80128"
        data = os.urandom(data_length)

        self.packet_in_message.data = bytes.fromhex(ethernet_data + ip_in_ethernet_frame) + data

        return self.packet_in_message.pack()


    def generate_benchmark_message(self, xid):
        echo_or_packet_in = randint(0, 1)
        if echo_or_packet_in:
            return self.generate_echo_request_message(xid)

        packet_in_size = randint(0, 2)
        return self.generate_packet_in_message(xid, pow(2, packet_in_size) * 32)


    def generate_features_reply_message(self, xid, datapath_id):
        self.features_reply_message.header.xid = xid
        self.features_reply_message.datapath_id = datapath_id

        return self.features_reply_message.pack()

    def generate_flow_mod_message(self, xid, srcIpAddress):
        match = Match(dl_type=2048,
                      nw_src=IPAddress(srcIpAddress))
        message = FlowMod(xid=xid, match=match, command=FlowModCommand.OFPFC_ADD)
        return message.pack()

    def generate_config_reply_message(self, xid, flags, miss_send_len):
        message = GetConfigReply()
        message.header.xid = xid
        message.flags = flags
        message.miss_send_len = miss_send_len
        return message.pack()

    def generate_echo_reply_message(self, xid):
        message = EchoReply(xid=xid)
        message.header.xid = xid
        return message.pack()

    def generate_echo_request_message(self, xid):
        message = EchoRequest(xid=xid)
        message.header.xid = xid
        return message.pack()

    def generate_stats_reply_message(self):
        data = b"\x01\x11\x04\x2c\xff\xff\xff\xfc\x00\x00\x00\x00\x43\x62\x65\x6e" \
        b"\x63\x68\x20\x2d\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x20" \
        b"\x49\x2f\x4f\x20\x62\x65\x6e\x63\x68\x6d\x61\x72\x6b\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x74\x68\x69\x73" \
        b"\x20\x69\x73\x20\x61\x63\x74\x75\x61\x6c\x6c\x79\x20\x73\x6f\x66" \
        b"\x74\x77\x61\x72\x65\x2e\x2e\x2e\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x76\x65\x72\x73" \
        b"\x69\x6f\x6e\x20\x30\x2e\x30\x31\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6e\x6f\x6e\x65" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6e\x6f\x6e\x65" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

        return data


    def generate_vendor_reply_message(self, xid):
        message = ErrorMsg(xid=xid)
        message.error_type = ErrorType.OFPET_BAD_REQUEST
        message.code = 0
        return message.pack()
